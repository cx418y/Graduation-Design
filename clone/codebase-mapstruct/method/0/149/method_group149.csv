"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"866","149","495","494","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/nestedsourceproperties/ReversingNestedSourcePropertiesTest.java","35","60","-2147393509","-2147393233","0","0","void shouldGenerateNestedReverse()","void shouldGenerateNestedReverse(){

        Song song1 = prepareSong();

        ChartEntry chartEntry = ArtistToChartEntryReverse.MAPPER.mapForward( song1 );

        assertThat( chartEntry ).isNotNull();
        assertThat( chartEntry.getArtistName() ).isEqualTo( ""The Beatles"" );
        assertThat( chartEntry.getChartName() ).isNull();
        assertThat( chartEntry.getCity() ).isEqualTo( ""London"" );
        assertThat( chartEntry.getPosition() ).isEqualTo( 0 );
        assertThat( chartEntry.getRecordedAt() ).isEqualTo( ""Abbey Road"" );
        assertThat( chartEntry.getSongTitle() ).isEqualTo( ""A Hard Day's Night"" );

        Song song2 = ArtistToChartEntryReverse.MAPPER.mapReverse( chartEntry );

        assertThat( song2 ).isNotNull();
        assertThat( song2.getArtist() ).isNotNull();
        assertThat( song2.getArtist().getName() ).isEqualTo( ""The Beatles"" );
        assertThat( song2.getArtist().getLabel() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getName() ).isNull();
        assertThat( song2.getArtist().getLabel().getStudio() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getStudio().getCity() ).isEqualTo( ""London"" );
        assertThat( song2.getArtist().getLabel().getStudio().getName() ).isEqualTo( ""Abbey Road"" );
    }"
"869","149","499","498","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/nestedsourceproperties/ReversingNestedSourcePropertiesTest.java","117","148","-2147392803","-2147392475","0","0","void shouldGenerateNestedReverseWithFactory()","void shouldGenerateNestedReverseWithFactory(){

        Song song1 = prepareSong();

        ChartEntry chartEntry = ArtistToChartEntryWithFactoryReverse.MAPPER.mapForward( song1 );

        assertThat( chartEntry ).isNotNull();
        assertThat( chartEntry.getArtistName() ).isEqualTo( ""The Beatles"" );
        assertThat( chartEntry.getChartName() ).isNull();
        assertThat( chartEntry.getCity() ).isEqualTo( ""London"" );
        assertThat( chartEntry.getPosition() ).isEqualTo( 0 );
        assertThat( chartEntry.getRecordedAt() ).isEqualTo( ""Abbey Road"" );
        assertThat( chartEntry.getSongTitle() ).isEqualTo( ""A Hard Day's Night"" );

        Song song2 = ArtistToChartEntryWithFactoryReverse.MAPPER.mapReverse( chartEntry );

        assertThat( song2 ).isNotNull();
        assertThat( song2.getArtist() ).isNotNull();
        assertThat( song2.getArtist().getName() ).isEqualTo( ""The Beatles"" );
        assertThat( song2.getArtist().getLabel() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getName() ).isNull();
        assertThat( song2.getArtist().getLabel().getStudio() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getStudio().getCity() ).isEqualTo( ""London"" );
        assertThat( song2.getArtist().getLabel().getStudio().getName() ).isEqualTo( ""Abbey Road"" );

        assertThat( SourceDtoFactory.isCreateSongCalled() ).isTrue();
        assertThat( SourceDtoFactory.isCreateStudioCalled() ).isTrue();
        assertThat( SourceDtoFactory.isCreateLabelCalled() ).isTrue();
        assertThat( SourceDtoFactory.isCreateArtistCalled() ).isTrue();

    }"
"871","149","495","505","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/nestedsourceproperties/ReversingNestedSourcePropertiesTest.java","182","207","-2147392172","-2147391896","0","0","void shouldGenerateNestedWithMappingReverse()","void shouldGenerateNestedWithMappingReverse(){

        Song song1 = prepareSong();

        ChartEntryWithMapping chartEntry = ArtistToChartEntryWithMappingReverse.MAPPER.mapForward( song1 );

        assertThat( chartEntry ).isNotNull();
        assertThat( chartEntry.getArtistId() ).isEqualTo( 1 );
        assertThat( chartEntry.getChartName() ).isNull();
        assertThat( chartEntry.getCity() ).isEqualTo( ""London"" );
        assertThat( chartEntry.getPosition() ).isEqualTo( 0 );
        assertThat( chartEntry.getRecordedAt() ).isEqualTo( ""Abbey Road"" );
        assertThat( chartEntry.getSongTitle() ).isEqualTo( ""A Hard Day's Night"" );

        Song song2 = ArtistToChartEntryWithMappingReverse.MAPPER.mapReverse( chartEntry );

        assertThat( song2 ).isNotNull();
        assertThat( song2.getArtist() ).isNotNull();
        assertThat( song2.getArtist().getName() ).isEqualTo( ""The Beatles"" );
        assertThat( song2.getArtist().getLabel() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getName() ).isNull();
        assertThat( song2.getArtist().getLabel().getStudio() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getStudio().getCity() ).isEqualTo( ""London"" );
        assertThat( song2.getArtist().getLabel().getStudio().getName() ).isEqualTo( ""Abbey Road"" );
    }"
"872","149","495","506","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/nestedsourceproperties/ReversingNestedSourcePropertiesTest.java","216","241","-2147391896","-2147391620","0","0","void shouldGenerateNestedWithConfigReverse()","void shouldGenerateNestedWithConfigReverse(){

        Song song1 = prepareSong();

        ChartEntryWithBase chartEntry = ArtistToChartEntryWithConfigReverse.MAPPER.mapForward( song1 );

        assertThat( chartEntry ).isNotNull();
        assertThat( chartEntry.getArtistName() ).isEqualTo( ""The Beatles"" );
        assertThat( chartEntry.getChartName() ).isNull();
        assertThat( chartEntry.getCity() ).isEqualTo( ""London"" );
        assertThat( chartEntry.getPosition() ).isEqualTo( 0 );
        assertThat( chartEntry.getRecordedAt() ).isEqualTo( ""Abbey Road"" );
        assertThat( chartEntry.getSongTitle() ).isEqualTo( ""A Hard Day's Night"" );

        Song song2 = ArtistToChartEntryWithConfigReverse.MAPPER.mapReverse( chartEntry );

        assertThat( song2 ).isNotNull();
        assertThat( song2.getArtist() ).isNotNull();
        assertThat( song2.getArtist().getName() ).isEqualTo( ""The Beatles"" );
        assertThat( song2.getArtist().getLabel() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getName() ).isNull();
        assertThat( song2.getArtist().getLabel().getStudio() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getStudio().getCity() ).isEqualTo( ""London"" );
        assertThat( song2.getArtist().getLabel().getStudio().getName() ).isEqualTo( ""Abbey Road"" );
    }"
"1277","149","495","494","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/ReversingNestedSourcePropertiesConstructorTest.java","36","61","-2147343049","-2147342773","0","0","void shouldGenerateNestedReverse()","void shouldGenerateNestedReverse(){

        Song song1 = prepareSong();

        ChartEntry chartEntry = ArtistToChartEntryReverse.MAPPER.mapForward( song1 );

        assertThat( chartEntry ).isNotNull();
        assertThat( chartEntry.getArtistName() ).isEqualTo( ""The Beatles"" );
        assertThat( chartEntry.getChartName() ).isNull();
        assertThat( chartEntry.getCity() ).isEqualTo( ""London"" );
        assertThat( chartEntry.getPosition() ).isEqualTo( 0 );
        assertThat( chartEntry.getRecordedAt() ).isEqualTo( ""Abbey Road"" );
        assertThat( chartEntry.getSongTitle() ).isEqualTo( ""A Hard Day's Night"" );

        Song song2 = ArtistToChartEntryReverse.MAPPER.mapReverse( chartEntry );

        assertThat( song2 ).isNotNull();
        assertThat( song2.getArtist() ).isNotNull();
        assertThat( song2.getArtist().getName() ).isEqualTo( ""The Beatles"" );
        assertThat( song2.getArtist().getLabel() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getName() ).isNull();
        assertThat( song2.getArtist().getLabel().getStudio() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getStudio().getCity() ).isEqualTo( ""London"" );
        assertThat( song2.getArtist().getLabel().getStudio().getName() ).isEqualTo( ""Abbey Road"" );
    }"
"1279","149","495","494","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/ReversingNestedSourcePropertiesConstructorTest.java","88","114","-2147342626","-2147342350","0","0","void shouldGenerateNestedReverseWithFactory()","void shouldGenerateNestedReverseWithFactory(){

        Song song1 = prepareSong();

        ChartEntry chartEntry = ArtistToChartEntryWithFactoryReverse.MAPPER.mapForward( song1 );

        assertThat( chartEntry ).isNotNull();
        assertThat( chartEntry.getArtistName() ).isEqualTo( ""The Beatles"" );
        assertThat( chartEntry.getChartName() ).isNull();
        assertThat( chartEntry.getCity() ).isEqualTo( ""London"" );
        assertThat( chartEntry.getPosition() ).isEqualTo( 0 );
        assertThat( chartEntry.getRecordedAt() ).isEqualTo( ""Abbey Road"" );
        assertThat( chartEntry.getSongTitle() ).isEqualTo( ""A Hard Day's Night"" );

        Song song2 = ArtistToChartEntryWithFactoryReverse.MAPPER.mapReverse( chartEntry );

        assertThat( song2 ).isNotNull();
        assertThat( song2.getArtist() ).isNotNull();
        assertThat( song2.getArtist().getName() ).isEqualTo( ""The Beatles"" );
        assertThat( song2.getArtist().getLabel() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getName() ).isNull();
        assertThat( song2.getArtist().getLabel().getStudio() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getStudio().getCity() ).isEqualTo( ""London"" );
        assertThat( song2.getArtist().getLabel().getStudio().getName() ).isEqualTo( ""Abbey Road"" );

    }"
"1281","149","495","505","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/ReversingNestedSourcePropertiesConstructorTest.java","148","173","-2147342047","-2147341771","0","0","void shouldGenerateNestedWithMappingReverse()","void shouldGenerateNestedWithMappingReverse(){

        Song song1 = prepareSong();

        ChartEntryWithMapping chartEntry = ArtistToChartEntryWithMappingReverse.MAPPER.mapForward( song1 );

        assertThat( chartEntry ).isNotNull();
        assertThat( chartEntry.getArtistId() ).isEqualTo( 1 );
        assertThat( chartEntry.getChartName() ).isNull();
        assertThat( chartEntry.getCity() ).isEqualTo( ""London"" );
        assertThat( chartEntry.getPosition() ).isEqualTo( 0 );
        assertThat( chartEntry.getRecordedAt() ).isEqualTo( ""Abbey Road"" );
        assertThat( chartEntry.getSongTitle() ).isEqualTo( ""A Hard Day's Night"" );

        Song song2 = ArtistToChartEntryWithMappingReverse.MAPPER.mapReverse( chartEntry );

        assertThat( song2 ).isNotNull();
        assertThat( song2.getArtist() ).isNotNull();
        assertThat( song2.getArtist().getName() ).isEqualTo( ""The Beatles"" );
        assertThat( song2.getArtist().getLabel() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getName() ).isNull();
        assertThat( song2.getArtist().getLabel().getStudio() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getStudio().getCity() ).isEqualTo( ""London"" );
        assertThat( song2.getArtist().getLabel().getStudio().getName() ).isEqualTo( ""Abbey Road"" );
    }"
"1282","149","495","506","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/ReversingNestedSourcePropertiesConstructorTest.java","182","207","-2147341771","-2147341495","0","0","void shouldGenerateNestedWithConfigReverse()","void shouldGenerateNestedWithConfigReverse(){

        Song song1 = prepareSong();

        ChartEntryWithBase chartEntry = ArtistToChartEntryWithConfigReverse.MAPPER.mapForward( song1 );

        assertThat( chartEntry ).isNotNull();
        assertThat( chartEntry.getArtistName() ).isEqualTo( ""The Beatles"" );
        assertThat( chartEntry.getChartName() ).isNull();
        assertThat( chartEntry.getCity() ).isEqualTo( ""London"" );
        assertThat( chartEntry.getPosition() ).isEqualTo( 0 );
        assertThat( chartEntry.getRecordedAt() ).isEqualTo( ""Abbey Road"" );
        assertThat( chartEntry.getSongTitle() ).isEqualTo( ""A Hard Day's Night"" );

        Song song2 = ArtistToChartEntryWithConfigReverse.MAPPER.mapReverse( chartEntry );

        assertThat( song2 ).isNotNull();
        assertThat( song2.getArtist() ).isNotNull();
        assertThat( song2.getArtist().getName() ).isEqualTo( ""The Beatles"" );
        assertThat( song2.getArtist().getLabel() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getName() ).isNull();
        assertThat( song2.getArtist().getLabel().getStudio() ).isNotNull();
        assertThat( song2.getArtist().getLabel().getStudio().getCity() ).isEqualTo( ""London"" );
        assertThat( song2.getArtist().getLabel().getStudio().getName() ).isEqualTo( ""Abbey Road"" );
    }"
