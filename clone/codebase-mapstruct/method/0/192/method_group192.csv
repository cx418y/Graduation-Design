"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"1103","192","619","618","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/selection/qualifier/iterable/IterableAndQualifiersTest.java","39","69","-2147363088","-2147362776","0","0","void testGenerationBasedOnQualifier()","void testGenerationBasedOnQualifier(){

        TopologyDto topologyDto1 = new TopologyDto();
        List<TopologyFeatureDto> topologyFeatures1 = new ArrayList<>();
        RiverDto riverDto = new RiverDto();
        riverDto.setName( ""Rhine"" );
        riverDto.setLength( 5 );
        topologyFeatures1.add( riverDto );
        topologyDto1.setTopologyFeatures( topologyFeatures1 );

        TopologyEntity result1 = TopologyMapper.INSTANCE.mapTopologyAsRiver( topologyDto1 );
        assertThat( result1.getTopologyFeatures() ).hasSize( 1 );
        assertThat( result1.getTopologyFeatures().get( 0 ).getName() ).isEqualTo( ""Rhine"" );
        assertThat( result1.getTopologyFeatures().get( 0 ) ).isInstanceOf( RiverEntity.class );
        assertThat( ( (RiverEntity) result1.getTopologyFeatures().get( 0 ) ).getLength() ).isEqualTo( 5 );

        TopologyDto topologyDto2 = new TopologyDto();
        List<TopologyFeatureDto> topologyFeatures2 = new ArrayList<>();
        CityDto cityDto = new CityDto();
        cityDto.setName( ""Amsterdam"" );
        cityDto.setPopulation( 800000 );
        topologyFeatures2.add( cityDto );
        topologyDto2.setTopologyFeatures( topologyFeatures2 );

        TopologyEntity result2 = TopologyMapper.INSTANCE.mapTopologyAsCity( topologyDto2 );
        assertThat( result2.getTopologyFeatures() ).hasSize( 1 );
        assertThat( result2.getTopologyFeatures().get( 0 ).getName() ).isEqualTo( ""Amsterdam"" );
        assertThat( result2.getTopologyFeatures().get( 0 ) ).isInstanceOf( CityEntity.class );
        assertThat( ( (CityEntity) result2.getTopologyFeatures().get( 0 ) ).getPopulation() ).isEqualTo( 800000 );

    }"
"1104","192","625","624","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/selection/qualifier/iterable/IterableAndQualifiersTest.java","73","104","-2147362776","-2147362456","0","0","void testIterableGeneratorBasedOnQualifier()","void testIterableGeneratorBasedOnQualifier(){

        TopologyWithoutIterableMappingMapper mapper = Mappers.getMapper( TopologyWithoutIterableMappingMapper.class );

        TopologyDto riverTopologyDto = new TopologyDto();
        List<TopologyFeatureDto> topologyFeatures1 = new ArrayList<>();
        RiverDto riverDto = new RiverDto();
        riverDto.setName( ""Rhine"" );
        riverDto.setLength( 5 );
        topologyFeatures1.add( riverDto );
        riverTopologyDto.setTopologyFeatures( topologyFeatures1 );

        TopologyEntity riverTopology = mapper.mapTopologyAsRiver( riverTopologyDto );
        assertThat( riverTopology.getTopologyFeatures() ).hasSize( 1 );
        assertThat( riverTopology.getTopologyFeatures().get( 0 ).getName() ).isEqualTo( ""Rhine"" );
        assertThat( riverTopology.getTopologyFeatures().get( 0 ) ).isInstanceOf( RiverEntity.class );
        assertThat( ( (RiverEntity) riverTopology.getTopologyFeatures().get( 0 ) ).getLength() ).isEqualTo( 5 );

        TopologyDto cityTopologyDto = new TopologyDto();
        List<TopologyFeatureDto> topologyFeatures2 = new ArrayList<>();
        CityDto cityDto = new CityDto();
        cityDto.setName( ""Amsterdam"" );
        cityDto.setPopulation( 800000 );
        topologyFeatures2.add( cityDto );
        cityTopologyDto.setTopologyFeatures( topologyFeatures2 );

        TopologyEntity cityTopology = mapper.mapTopologyAsCity( cityTopologyDto );
        assertThat( cityTopology.getTopologyFeatures() ).hasSize( 1 );
        assertThat( cityTopology.getTopologyFeatures().get( 0 ).getName() ).isEqualTo( ""Amsterdam"" );
        assertThat( cityTopology.getTopologyFeatures().get( 0 ) ).isInstanceOf( CityEntity.class );
        assertThat( ( (CityEntity) cityTopology.getTopologyFeatures().get( 0 ) ).getPopulation() ).isEqualTo( 800000 );
    }"
