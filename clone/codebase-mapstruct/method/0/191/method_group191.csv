"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"1101","191","621","620","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/selection/qualifier/QualifierTest.java","143","169","-2147363422","-2147363139","0","0","void shouldMatchClassAndMethod()","void shouldMatchClassAndMethod(){

        OriginalRelease foreignMovies = new OriginalRelease();
        foreignMovies.setTitle( ""Sixth Sense, The"" );
        foreignMovies.setKeyWords( Arrays.asList( ""evergreen"", ""magnificent"" ) );
        Map<String, List<String>> facts = new HashMap<>();
        facts.put( ""director"", Arrays.asList( ""M. Night Shyamalan"" ) );
        facts.put( ""cast"", Arrays.asList( ""Bruce Willis"", ""Haley Joel Osment"", ""Toni Collette"" ) );
        facts.put( ""plot keywords"", Arrays.asList( ""boy"", ""child psychologist"", ""I see dead people"" ) );
        foreignMovies.setFacts( facts );

        AbstractEntry abstractEntry = MovieFactoryMapper.INSTANCE.toGerman( foreignMovies );
        assertThat( abstractEntry ).isNotNull();
        assertThat( abstractEntry ).isInstanceOf( GermanRelease.class );
        assertThat( abstractEntry.getTitle() ).isEqualTo( ""Sixth Sense, The"" );
        assertThat( abstractEntry.getKeyWords() ).isNotNull();
        assertThat( abstractEntry.getKeyWords().size() ).isEqualTo( 2 );
        assertThat( abstractEntry.getKeyWords() ).containsSequence( ""evergreen"", ""magnificent"" );

        assertThat( abstractEntry.getFacts() ).isNotNull();
        assertThat( abstractEntry.getFacts() ).hasSize( 3 );
        assertThat( abstractEntry.getFacts() ).contains(
                entry( ""director"", Arrays.asList( ""M. Night Shyamalan"" ) ),
                entry( ""cast"", Arrays.asList( ""Bruce Willis"", ""Haley Joel Osment"", ""Toni Collette"" ) ),
                entry( ""plot keywords"", Arrays.asList( ""boy"", ""child psychologist"", ""I see dead people"" ) )
        );
    }"
"1113","191","621","620","0","/Users/macbook/Desktop/design/open/mapstruct/processor/src/test/java/org/mapstruct/ap/test/selection/qualifier/named/NamedTest.java","91","117","-2147361814","-2147361531","0","0","void shouldMatchClassAndMethod()","void shouldMatchClassAndMethod(){

        OriginalRelease foreignMovies = new OriginalRelease();
        foreignMovies.setTitle( ""Sixth Sense, The"" );
        foreignMovies.setKeyWords( Arrays.asList( ""evergreen"", ""magnificent"" ) );
        Map<String, List<String>> facts = new HashMap<>();
        facts.put( ""director"", Arrays.asList( ""M. Night Shyamalan"" ) );
        facts.put( ""cast"", Arrays.asList( ""Bruce Willis"", ""Haley Joel Osment"", ""Toni Collette"" ) );
        facts.put( ""plot keywords"", Arrays.asList( ""boy"", ""child psychologist"", ""I see dead people"" ) );
        foreignMovies.setFacts( facts );

        AbstractEntry abstractEntry = MovieFactoryMapper.INSTANCE.toGerman( foreignMovies );
        assertThat( abstractEntry ).isNotNull();
        assertThat( abstractEntry ).isInstanceOf( GermanRelease.class );
        assertThat( abstractEntry.getTitle() ).isEqualTo( ""Sixth Sense, The"" );
        assertThat( abstractEntry.getKeyWords() ).isNotNull();
        assertThat( abstractEntry.getKeyWords().size() ).isEqualTo( 2 );
        assertThat( abstractEntry.getKeyWords() ).containsSequence( ""evergreen"", ""magnificent"" );

        assertThat( abstractEntry.getFacts() ).isNotNull();
        assertThat( abstractEntry.getFacts() ).hasSize( 3 );
        assertThat( abstractEntry.getFacts() ).contains(
                entry( ""director"", Arrays.asList( ""M. Night Shyamalan"" ) ),
                entry( ""cast"", Arrays.asList( ""Bruce Willis"", ""Haley Joel Osment"", ""Toni Collette"" ) ),
                entry( ""plot keywords"", Arrays.asList( ""boy"", ""child psychologist"", ""I see dead people"" ) )
        );
    }"
