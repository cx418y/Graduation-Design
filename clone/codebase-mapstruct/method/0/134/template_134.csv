"templateId","methodName","templateCommon","diffDetails"
"0","inverseMappingIsDoneUsingSubclassMapping","void inverseMappingIsDoneUsingSubclassMapping(){
        VehicleCollectionDto vehicles = new VehicleCollectionDto();
[*1*] 
[*2*] 
        vehicles.getVehicles().add( new CarDto() );
        vehicles.getVehicles().add( new BikeDto() );

        VehicleCollection result = SimpleSubclassMapper.INSTANCE.mapInverse( vehicles );

        assertThat( result.getVehicles() ).doesNotContainNull();
        assertThat( result.getVehicles() )            .extracting( vehicle -> (Class) vehicle.getClass() )
            .containsExactly( Car.class, Bike.class );[*3*] 
[*4*] 
    }
","[*1*]:
1, 0.3333333333333333,         vehicles.getVehicles().add( new CarDto() );
[*2*]:
1, 0.3333333333333333,         vehicles.getVehicles().add( new BikeDto() );
[*3*]:
[*4*]:
1, 0.3333333333333333,             .containsExactly( Car.class, Bike.class, Harley.class, Davidson.class );
"
