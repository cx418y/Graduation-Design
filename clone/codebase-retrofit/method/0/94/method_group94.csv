"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"574","94","303","302","0","/Users/macbook/Desktop/design/open/retrofit/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java","127","166","-2147417029","-2147416830","0","0","void bodyThrowingInOnErrorDeliveredToPlugin()throws InterruptedException","void bodyThrowingInOnErrorDeliveredToPlugin()throws InterruptedException{
    server.enqueue(new MockResponse().setResponseCode(404));

    final CountDownLatch latch = new CountDownLatch(1);
    final AtomicReference<Throwable> pluginRef = new AtomicReference<>();
    RxJavaPlugins.getInstance()
        .registerErrorHandler(
            new RxJavaErrorHandler() {
              @Override
              public void handleError(Throwable throwable) {
                if (!pluginRef.compareAndSet(null, throwable)) {
                  throw Exceptions.propagate(throwable);                }
                latch.countDown();
              }
            });

    final TestSubscriber<Void> subscriber = new TestSubscriber<>();
    final RuntimeException e = new RuntimeException();
    final AtomicReference<Throwable> errorRef = new AtomicReference<>();
    service
        .completable()
        .unsafeSubscribe(
            new AsyncCompletableSubscriber() {
              @Override
              public void onCompleted() {
                subscriber.onCompleted();
              }

              @Override
              public void onError(Throwable t) {
                errorRef.set(t);
                throw e;
              }
            });

    assertTrue(latch.await(1, SECONDS));
    CompositeException composite = (CompositeException) pluginRef.get();
    assertThat(composite.getExceptions()).containsExactly(errorRef.get(), e);
  }"
"575","94","309","308","0","/Users/macbook/Desktop/design/open/retrofit/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/AsyncTest.java","169","211","-2147416830","-2147416616","0","0","void bodyThrowingInOnSafeSubscriberErrorDeliveredToPlugin()throws InterruptedException","void bodyThrowingInOnSafeSubscriberErrorDeliveredToPlugin()throws InterruptedException{
    server.enqueue(new MockResponse().setResponseCode(404));

    final CountDownLatch latch = new CountDownLatch(1);
    final AtomicReference<Throwable> pluginRef = new AtomicReference<>();
    RxJavaPlugins.getInstance()
        .registerErrorHandler(
            new RxJavaErrorHandler() {
              @Override
              public void handleError(Throwable throwable) {
                if (throwable instanceof OnErrorFailedException) {
                  if (!pluginRef.compareAndSet(null, throwable)) {
                    throw Exceptions.propagate(throwable);                  }
                  latch.countDown();
                }
              }
            });

    final TestSubscriber<Void> subscriber = new TestSubscriber<>();
    final RuntimeException e = new RuntimeException();
    final AtomicReference<Throwable> errorRef = new AtomicReference<>();
    service
        .completable()
        .subscribe(
            new AsyncCompletableSubscriber() {
              @Override
              public void onCompleted() {
                subscriber.onCompleted();
              }

              @Override
              public void onError(Throwable t) {
                errorRef.set(t);
                throw e;
              }
            });

    assertTrue(latch.await(1, SECONDS));
    OnErrorFailedException failed = (OnErrorFailedException) pluginRef.get();
    CompositeException composite = (CompositeException) failed.getCause();
    assertThat(composite.getExceptions()).containsExactly(errorRef.get(), e);
  }"
