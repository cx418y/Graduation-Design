"templateId","methodName","templateCommon","diffDetails"
"0","responseThrowingInOnErrorDeliveredToPlugin","void responseThrowingInOnErrorDeliveredToPlugin(){
    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));

    final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
    RxJavaPlugins.setErrorHandler([*1*] 
        throwable -> {[*2*] 
[*3*] 
[*4*] 
[*5*] 
[*6*] 
[*7*] 
          if (!throwableRef.compareAndSet(null, throwable)) {
            throw Exceptions.propagate(throwable);[*8*] 
[*9*] 
[*10*] 
          }
        });

    RecordingMaybeObserver<Response<String>> observer = subscriberRule.create();
    final AtomicReference<Throwable> errorRef = new AtomicReference<>();
    final RuntimeException e = new RuntimeException();
    service
        .response()
        .subscribe(
            new ForwardingObserver<Response<String>>(observer) {
              @Override
              public void onError(Throwable throwable) {
                if (!errorRef.compareAndSet(null, throwable)) {
                  throw Exceptions.propagate(throwable);
                }
                throw e;
              }
            });

    CompositeException composite = (CompositeException) throwableRef.get();[*11*] 
[*12*] 
    assertThat(composite.getExceptions()).containsExactly(errorRef.get(), e);
  }
","[*1*]:
3, 0.2727272727272727,     RxJavaPlugins.getInstance()
[*2*]:
[*3*]:
3, 0.2727272727272727,         .registerErrorHandler(
[*4*]:
3, 0.2727272727272727,             new RxJavaErrorHandler() {
[*5*]:
3, 0.2727272727272727,               @Override
[*6*]:
3, 0.2727272727272727,               public void handleError(Throwable throwable) {
[*7*]:
1, 0.09090909090909091,                 if (throwable instanceof OnErrorFailedException) {
[*8*]:
[*9*]:
3, 0.2727272727272727,                   throw Exceptions.propagate(throwable);                }
[*10*]:
1, 0.09090909090909091,                 }
[*11*]:
[*12*]:
1, 0.09090909090909091,     CompositeException composite = (CompositeException) pluginRef.get().getCause();
"
