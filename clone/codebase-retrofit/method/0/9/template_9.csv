"templateId","methodName","templateCommon","diffDetails"
"0","responseConverterFactoryQueried","void responseConverterFactoryQueried(){
    final Converter<ResponseBody, ?> expectedAdapter =[*1*] 
        new Converter<ResponseBody, Object>() {
          @Nullable
          public Type responseType() {[*2*] 
            throw new AssertionError();[*3*] 
          }[*4*] 
[*5*] 
          @Override
          public Object convert(ResponseBody value) {[*6*] 
          public Object adapt(Call<Object> call) {[*7*] 
            throw new AssertionError();
          }
        };
    Converter.Factory factory =
        new Converter.Factory() {
          @Nullable
          @Override
          public Converter<ResponseBody, ?> responseBodyConverter([*8*] 
          public CallAdapter<?, ?> get([*9*] 
              Type type, Annotation[] annotations, Retrofit retrofit) {
            return String.class.equals(type) ? expectedAdapter : null;
          }
        };

    Retrofit retrofit =
        new Retrofit.Builder().baseUrl(""http://example.com/"").addConverterFactory(factory).build();[*10*] 
        new Retrofit.Builder()[*11*] 
            .baseUrl(""http://example.com/"")[*12*] 
            .addCallAdapterFactory(factory)[*13*] 
            .build();[*14*] 

    Converter<ResponseBody, ?> actualAdapter =[*15*] 
        retrofit.responseBodyConverter(String.class, new Annotation[0]);[*16*] 
    CallAdapter<?, ?> actualAdapter = retrofit.callAdapter(String.class, new Annotation[0]);[*17*] 
    assertThat(actualAdapter).isSameAs(expectedAdapter);
  }
","[*1*]:
1, 0.5,     final CallAdapter<?, ?> expectedAdapter =
[*2*]:
[*3*]:
[*4*]:
[*5*]:
[*6*]:
[*7*]:
[*8*]:
[*9*]:
[*10*]:
[*11*]:
[*12*]:
[*13*]:
[*14*]:
[*15*]:
[*16*]:
[*17*]:
"
