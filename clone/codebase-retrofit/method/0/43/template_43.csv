"templateId","methodName","templateCommon","diffDetails"
"0","rawBodyTypeThrows","void rawBodyTypeThrows(){
    Type observableType = new TypeToken<Observable>() {}.getType();[*1*] 
    try {[*2*] 
      factory.get(observableType, NO_ANNOTATIONS, retrofit);[*3*] 
      fail();[*4*] 
    } catch (IllegalStateException e) {[*5*] 
      assertThat(e)[*6*] 
          .hasMessage([*7*] 
              ""Observable return type must be parameterized as Observable<Foo> or Observable<? extends Foo>"");[*8*] 
    }[*9*] 
[*10*] 
    Type singleType = new TypeToken<Single>() {}.getType();[*11*] 
    try {[*12*] 
      factory.get(singleType, NO_ANNOTATIONS, retrofit);[*13*] 
      fail();[*14*] 
    } catch (IllegalStateException e) {[*15*] 
      assertThat(e)[*16*] 
          .hasMessage([*17*] 
              ""Single return type must be parameterized as Single<Foo> or Single<? extends Foo>"");[*18*] 
    }[*19*] 
[*20*] 
    Type maybeType = new TypeToken<Maybe>() {}.getType();
    try {
      factory.get(maybeType, NO_ANNOTATIONS, retrofit);
      fail();
    } catch (IllegalStateException e) {
      assertThat(e)
          .hasMessage(
              ""Maybe return type must be parameterized as Maybe<Foo> or Maybe<? extends Foo>"");
    }

    Type flowableType = new TypeToken<Flowable>() {}.getType();
    try {
      factory.get(flowableType, NO_ANNOTATIONS, retrofit);
      fail();
    } catch (IllegalStateException e) {
      assertThat(e)
          .hasMessage(
              ""Flowable return type must be parameterized as Flowable<Foo> or Flowable<? extends Foo>"");
    }
  }
","[*1*]:
[*2*]:
[*3*]:
[*4*]:
[*5*]:
[*6*]:
[*7*]:
[*8*]:
[*9*]:
[*10*]:
[*11*]:
[*12*]:
[*13*]:
[*14*]:
[*15*]:
[*16*]:
[*17*]:
[*18*]:
[*19*]:
[*20*]:
"
