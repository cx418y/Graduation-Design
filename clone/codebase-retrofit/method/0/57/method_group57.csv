"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"281","57","202","201","0","/Users/macbook/Desktop/design/open/retrofit/retrofit-adapters/rxjava3/src/test/java/retrofit2/adapter/rxjava3/ObservableWithSchedulerTest.java","83","92","-2147446078","-2147446021","0","0","void resultUsesScheduler()","void resultUsesScheduler(){
    server.enqueue(new MockResponse());

    RecordingObserver<Object> observer = observerRule.create();
    service.result().subscribe(observer);
    observer.assertNoEvents();

    scheduler.triggerActions();
    observer.assertAnyValue().assertComplete();
  }"
"298","57","208","207","0","/Users/macbook/Desktop/design/open/retrofit/retrofit-adapters/rxjava3/src/test/java/retrofit2/adapter/rxjava3/SingleWithSchedulerTest.java","83","92","-2147444969","-2147444916","0","0","void resultUsesScheduler()","void resultUsesScheduler(){
    server.enqueue(new MockResponse());

    RecordingSingleObserver<Object> observer = observerRule.create();
    service.result().subscribe(observer);
    observer.assertNoEvents();

    scheduler.triggerActions();
    observer.assertAnyValue();
  }"
"315","57","208","207","0","/Users/macbook/Desktop/design/open/retrofit/retrofit-adapters/rxjava3/src/test/java/retrofit2/adapter/rxjava3/MaybeWithSchedulerTest.java","83","92","-2147441807","-2147441754","0","0","void resultUsesScheduler()","void resultUsesScheduler(){
    server.enqueue(new MockResponse());

    RecordingMaybeObserver<Object> observer = observerRule.create();
    service.result().subscribe(observer);
    observer.assertNoEvents();

    scheduler.triggerActions();
    observer.assertAnyValue();
  }"
"342","57","202","201","0","/Users/macbook/Desktop/design/open/retrofit/retrofit-adapters/rxjava3/src/test/java/retrofit2/adapter/rxjava3/FlowableWithSchedulerTest.java","83","92","-2147438878","-2147438821","0","0","void resultUsesScheduler()","void resultUsesScheduler(){
    server.enqueue(new MockResponse());

    RecordingSubscriber<Object> subscriber = subscriberRule.create();
    service.result().subscribe(subscriber);
    subscriber.assertNoEvents();

    scheduler.triggerActions();
    subscriber.assertAnyValue().assertComplete();
  }"
"408","57","202","201","0","/Users/macbook/Desktop/design/open/retrofit/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableWithSchedulerTest.java","83","92","-2147433105","-2147433048","0","0","void resultUsesScheduler()","void resultUsesScheduler(){
    server.enqueue(new MockResponse());

    RecordingObserver<Object> observer = observerRule.create();
    service.result().subscribe(observer);
    observer.assertNoEvents();

    scheduler.triggerActions();
    observer.assertAnyValue().assertComplete();
  }"
"425","57","208","207","0","/Users/macbook/Desktop/design/open/retrofit/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleWithSchedulerTest.java","83","92","-2147431996","-2147431943","0","0","void resultUsesScheduler()","void resultUsesScheduler(){
    server.enqueue(new MockResponse());

    RecordingSingleObserver<Object> observer = observerRule.create();
    service.result().subscribe(observer);
    observer.assertNoEvents();

    scheduler.triggerActions();
    observer.assertAnyValue();
  }"
"438","57","208","207","0","/Users/macbook/Desktop/design/open/retrofit/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeWithSchedulerTest.java","83","92","-2147430720","-2147430667","0","0","void resultUsesScheduler()","void resultUsesScheduler(){
    server.enqueue(new MockResponse());

    RecordingMaybeObserver<Object> observer = observerRule.create();
    service.result().subscribe(observer);
    observer.assertNoEvents();

    scheduler.triggerActions();
    observer.assertAnyValue();
  }"
"469","57","202","201","0","/Users/macbook/Desktop/design/open/retrofit/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableWithSchedulerTest.java","83","92","-2147425885","-2147425828","0","0","void resultUsesScheduler()","void resultUsesScheduler(){
    server.enqueue(new MockResponse());

    RecordingSubscriber<Object> subscriber = subscriberRule.create();
    service.result().subscribe(subscriber);
    subscriber.assertNoEvents();

    scheduler.triggerActions();
    subscriber.assertAnyValue().assertComplete();
  }"
