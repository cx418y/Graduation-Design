"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"132","13","45","44","0","/Users/macbook/Desktop/design/open/retrofit/retrofit/src/test/java/retrofit2/CallTest.java","769","802","-2147468121","-2147467914","0","0","void cancelRequest()throws InterruptedException","void cancelRequest()throws InterruptedException{
    Retrofit retrofit =
        new Retrofit.Builder()
            .baseUrl(server.url(""/""))
            .addConverterFactory(new ToStringConverterFactory())
            .build();
    Service service = retrofit.create(Service.class);

    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.NO_RESPONSE));

    Call<String> call = service.getString();

    final AtomicReference<Throwable> failureRef = new AtomicReference<>();
    final CountDownLatch latch = new CountDownLatch(1);
    call.enqueue(
        new Callback<String>() {
          @Override
          public void onResponse(Call<String> call, Response<String> response) {
            throw new AssertionError();
          }

          @Override
          public void onFailure(Call<String> call, Throwable t) {
            failureRef.set(t);
            latch.countDown();
          }
        });

    call.cancel();
    assertThat(call.isCanceled()).isTrue();

    assertTrue(latch.await(10, SECONDS));
    assertThat(failureRef.get()).isInstanceOf(IOException.class).hasMessage(""Canceled"");
  }"
"133","13","49","48","0","/Users/macbook/Desktop/design/open/retrofit/retrofit/src/test/java/retrofit2/CallTest.java","805","841","-2147467914","-2147467690","0","0","void cancelOkHttpRequest()throws InterruptedException","void cancelOkHttpRequest()throws InterruptedException{
    OkHttpClient client = new OkHttpClient();
    Retrofit retrofit =
        new Retrofit.Builder()
            .baseUrl(server.url(""/""))
            .client(client)
            .addConverterFactory(new ToStringConverterFactory())
            .build();
    Service service = retrofit.create(Service.class);

    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.NO_RESPONSE));

    Call<String> call = service.getString();

    final AtomicReference<Throwable> failureRef = new AtomicReference<>();
    final CountDownLatch latch = new CountDownLatch(1);
    call.enqueue(
        new Callback<String>() {
          @Override
          public void onResponse(Call<String> call, Response<String> response) {
            throw new AssertionError();
          }

          @Override
          public void onFailure(Call<String> call, Throwable t) {
            failureRef.set(t);
            latch.countDown();
          }
        });

    client.dispatcher().cancelAll();
    assertThat(call.isCanceled()).isTrue();

    assertTrue(latch.await(10, SECONDS));
    assertThat(failureRef.get()).isInstanceOf(IOException.class).hasMessage(""Canceled"");
  }"
