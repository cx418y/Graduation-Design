"templateId","methodName","templateCommon","diffDetails"
"0","cancelRequest","void cancelRequest()throws InterruptedException{
    OkHttpClient client = new OkHttpClient();[*1*] 
    Retrofit retrofit =
        new Retrofit.Builder()
            .baseUrl(server.url(""/""))
            .client(client)[*2*] 
            .addConverterFactory(new ToStringConverterFactory())
            .build();
    Service service = retrofit.create(Service.class);

    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.NO_RESPONSE));

    Call<String> call = service.getString();

    final AtomicReference<Throwable> failureRef = new AtomicReference<>();
    final CountDownLatch latch = new CountDownLatch(1);
    call.enqueue(
        new Callback<String>() {
          @Override
          public void onResponse(Call<String> call, Response<String> response) {
            throw new AssertionError();
          }

          @Override
          public void onFailure(Call<String> call, Throwable t) {
            failureRef.set(t);
            latch.countDown();
          }
        });

    client.dispatcher().cancelAll();[*3*] 
    assertThat(call.isCanceled()).isTrue();

    assertTrue(latch.await(10, SECONDS));
    assertThat(failureRef.get()).isInstanceOf(IOException.class).hasMessage(""Canceled"");
  }
","[*1*]:
1, 0.5,     call.cancel();
[*2*]:
[*3*]:
"
