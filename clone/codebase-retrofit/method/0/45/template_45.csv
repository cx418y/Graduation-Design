"templateId","methodName","templateCommon","diffDetails"
"0","rawResultTypeThrows","void rawResultTypeThrows(){
    Type observableType = new TypeToken<Observable<Result>>() {}.getType();[*1*] 
    try {[*2*] 
      factory.get(observableType, NO_ANNOTATIONS, retrofit);[*3*] 
      fail();[*4*] 
    } catch (IllegalStateException e) {[*5*] 
      assertThat(e)[*6*] 
          .hasMessage(""Result must be parameterized as Result<Foo> or Result<? extends Foo>"");[*7*] 
    }[*8*] 
[*9*] 
    Type singleType = new TypeToken<Single<Result>>() {}.getType();[*10*] 
    try {[*11*] 
      factory.get(singleType, NO_ANNOTATIONS, retrofit);[*12*] 
      fail();[*13*] 
    } catch (IllegalStateException e) {[*14*] 
      assertThat(e)[*15*] 
          .hasMessage(""Result must be parameterized as Result<Foo> or Result<? extends Foo>"");[*16*] 
    }[*17*] 
[*18*] 
    Type maybeType = new TypeToken<Maybe<Result>>() {}.getType();
    try {
      factory.get(maybeType, NO_ANNOTATIONS, retrofit);
      fail();
    } catch (IllegalStateException e) {
      assertThat(e)
          .hasMessage(""Result must be parameterized as Result<Foo> or Result<? extends Foo>"");
    }

    Type flowableType = new TypeToken<Flowable<Result>>() {}.getType();
    try {
      factory.get(flowableType, NO_ANNOTATIONS, retrofit);
      fail();
    } catch (IllegalStateException e) {
      assertThat(e)
          .hasMessage(""Result must be parameterized as Result<Foo> or Result<? extends Foo>"");
    }
  }
","[*1*]:
[*2*]:
[*3*]:
[*4*]:
[*5*]:
[*6*]:
[*7*]:
[*8*]:
[*9*]:
[*10*]:
[*11*]:
[*12*]:
[*13*]:
[*14*]:
[*15*]:
[*16*]:
[*17*]:
[*18*]:
"
