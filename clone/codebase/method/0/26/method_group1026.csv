"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"161","26","81","80","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/matching/LogicalAndTest.java","30","40","-2147467312","-2147467246","0","0","void matchesWhenAllContainedMatchersMatch()","void matchesWhenAllContainedMatchersMatch(){
    StringValuePattern matcher =
        WireMock.and(
            WireMock.before(""2021-01-01T00:00:00Z""), WireMock.after(""2020-01-01T00:00:00Z""));

    assertThat(
        matcher.getExpected(), is(""before 2021-01-01T00:00:00Z AND after 2020-01-01T00:00:00Z""));

    assertTrue(matcher.match(""2020-06-01T11:22:33Z"").isExactMatch());
    assertFalse(matcher.match(""2021-06-01T11:22:33Z"").isExactMatch());
  }"
"192","26","93","92","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/matching/LogicalOrTest.java","31","42","-2147464596","-2147464516","0","0","void matchesWhenAnyContainedMatchersMatch()","void matchesWhenAnyContainedMatchersMatch(){
    StringValuePattern matcher =
        WireMock.or(
            WireMock.before(""2020-01-01T00:00:00Z""), WireMock.after(""2021-01-01T00:00:00Z""));

    assertThat(
        matcher.getExpected(), is(""before 2020-01-01T00:00:00Z OR after 2021-01-01T00:00:00Z""));

    assertTrue(matcher.match(""2022-06-01T11:22:33Z"").isExactMatch());
    assertTrue(matcher.match(""2019-06-01T11:22:33Z"").isExactMatch());
    assertFalse(matcher.match(""2020-06-01T11:22:33Z"").isExactMatch());
  }"
