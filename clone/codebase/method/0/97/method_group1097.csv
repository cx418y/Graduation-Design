"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"691","97","343","342","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/admin/LimitAndOffsetPaginatorTest.java","51","58","-2147420145","-2147420077","0","0","void returnsTruncatedListFromStartWhenOnlyLimitIsSpecified()","void returnsTruncatedListFromStartWhenOnlyLimitIsSpecified(){
    List<Integer> source = asList(1, 2, 3, 4, 5);
    LimitAndOffsetPaginator<Integer> paginator = new LimitAndOffsetPaginator<>(source, 3, null);

    List<Integer> result = paginator.select();

    assertThat(result, is(asList(1, 2, 3)));
  }"
"693","97","343","348","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/admin/LimitAndOffsetPaginatorTest.java","71","78","-2147420009","-2147419941","0","0","void returnsRangeWhenBothAreSpecified()","void returnsRangeWhenBothAreSpecified(){
    List<Integer> source = asList(1, 2, 3, 4, 5);
    LimitAndOffsetPaginator<Integer> paginator = new LimitAndOffsetPaginator<>(source, 3, 1);

    List<Integer> result = paginator.select();

    assertThat(result, is(asList(2, 3, 4)));
  }"
"694","97","354","353","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/admin/LimitAndOffsetPaginatorTest.java","81","88","-2147419941","-2147419875","0","0","void returnsToEndOfListWhenTopBoundIsGreaterThanListSize()","void returnsToEndOfListWhenTopBoundIsGreaterThanListSize(){
    List<Integer> source = asList(1, 2, 3, 4, 5);
    LimitAndOffsetPaginator<Integer> paginator = new LimitAndOffsetPaginator<>(source, 7, 3);

    List<Integer> result = paginator.select();

    assertThat(result, is(asList(4, 5)));
  }"
