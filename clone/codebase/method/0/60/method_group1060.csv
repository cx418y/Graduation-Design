"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"419","60","220","219","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/NearMissesAcceptanceTest.java","33","58","-2147444591","-2147444314","0","0","void nearMisses()","void nearMisses(){
    stubFor(
        get(urlEqualTo(""/mypath""))
            .withHeader(""My-Header"", equalTo(""matched""))
            .willReturn(aResponse().withStatus(200)));
    stubFor(
        get(urlEqualTo(""/otherpath""))
            .withHeader(""My-Header"", equalTo(""otherheaderval""))
            .willReturn(aResponse().withStatus(200)));
    stubFor(
        get(urlEqualTo(""/yet/another/path""))
            .withHeader(""X-Alt-Header"", equalTo(""matchonthis""))
            .willReturn(aResponse().withStatus(200)));

    testClient.get(""/otherpath"", withHeader(""My-Header"", ""notmatched""));

    List<NearMiss> nearMisses = WireMock.findNearMissesForAllUnmatched();

    assertThat(nearMisses.get(0).getRequest().getUrl(), is(""/otherpath""));
    assertThat(nearMisses.get(1).getRequest().getUrl(), is(""/otherpath""));
    assertThat(nearMisses.get(2).getRequest().getUrl(), is(""/otherpath""));

    assertThat(nearMisses.get(0).getStubMapping().getRequest().getUrl(), is(""/otherpath""));
    assertThat(nearMisses.get(1).getStubMapping().getRequest().getUrl(), is(""/yet/another/path""));
    assertThat(nearMisses.get(2).getStubMapping().getRequest().getUrl(), is(""/mypath""));
  }"
"421","60","224","223","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/NearMissesAcceptanceTest.java","76","102","-2147444227","-2147443944","0","0","void returnsStubMappingNearMissesForARequest()","void returnsStubMappingNearMissesForARequest(){
    stubFor(
        get(urlEqualTo(""/mypath""))
            .withHeader(""My-Header"", equalTo(""matched""))
            .willReturn(aResponse().withStatus(200)));
    stubFor(
        get(urlEqualTo(""/otherpath""))
            .withHeader(""My-Header"", equalTo(""otherheaderval""))
            .willReturn(aResponse().withStatus(200)));
    stubFor(
        get(urlEqualTo(""/yet/another/path""))
            .withHeader(""X-Alt-Header"", equalTo(""matchonthis""))
            .willReturn(aResponse().withStatus(200)));

    List<NearMiss> nearMisses =
        WireMock.findNearMissesFor(
            LoggedRequest.createFrom(
                mockRequest().url(""/otherpath"").header(""My-Header"", ""notmatched"")));

    assertThat(nearMisses.get(0).getRequest().getUrl(), is(""/otherpath""));
    assertThat(nearMisses.get(1).getRequest().getUrl(), is(""/otherpath""));
    assertThat(nearMisses.get(2).getRequest().getUrl(), is(""/otherpath""));

    assertThat(nearMisses.get(0).getStubMapping().getRequest().getUrl(), is(""/otherpath""));
    assertThat(nearMisses.get(1).getStubMapping().getRequest().getUrl(), is(""/yet/another/path""));
    assertThat(nearMisses.get(2).getStubMapping().getRequest().getUrl(), is(""/mypath""));
  }"
