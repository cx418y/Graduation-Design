"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"463","66","243","242","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java","635","656","-2147439610","-2147439508","0","0","void returnsBadEntityStatusWhenInvalidMatchOperator()","void returnsBadEntityStatusWhenInvalidMatchOperator(){
    WireMockResponse response =
        testClient.postJson(
            ""/__admin/mappings"",
            ""{\n""
                + ""    \""request\"": {\n""
                + ""        \""bodyPatterns\"": [\n""
                + ""            {\n""
                + ""                \""matching\"": \""somebad]]][[stuff\""\n""
                + ""            }\n""
                + ""        ]\n""
                + ""    }\n""
                + ""}"");

    assertThat(response.statusCode(), is(422));

    Errors errors = Json.read(response.content(), Errors.class);
    assertThat(errors.first().getSource().getPointer(), is(""/request/bodyPatterns/0""));
    assertThat(
        errors.first().getDetail(),
        is(""{\""matching\"":\""somebad]]][[stuff\""} is not a valid match operation""));
  }"
"465","66","258","257","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java","686","710","-2147439400","-2147439290","0","0","void returnsBadEntityStatusOnEqualToJsonOperand()","void returnsBadEntityStatusOnEqualToJsonOperand(){
    WireMockResponse response =
        testClient.postJson(
            ""/__admin/mappings"",
            ""{\n""
                + ""    \""request\"": {\n""
                + ""        \""bodyPatterns\"": [\n""
                + ""            {\n""
                + ""                \""equalToJson\"": \""(wrong)\""\n""
                + ""            }\n""
                + ""        ]\n""
                + ""    }\n""
                + ""}"");

    assertThat(response.statusCode(), is(422));

    Errors errors = Json.read(response.content(), Errors.class);
    assertThat(errors.first().getSource().getPointer(), is(""/request/bodyPatterns/0""));
    assertThat(
        errors.first().getDetail(),
        allOf(
            containsString(
                ""Unexpected character ('(' (code 40)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')""),
            containsString(""line: 1, column: 2"")));
  }"
"466","66","270","269","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java","713","734","-2147439290","-2147439170","0","0","void returnsBadEntityStatusWhenInvalidEqualToXmlSpecified()","void returnsBadEntityStatusWhenInvalidEqualToXmlSpecified(){
    WireMockResponse response =
        testClient.postJson(
            ""/__admin/mappings"",
            ""{\n""
                + ""    \""request\"": {\n""
                + ""        \""bodyPatterns\"": [\n""
                + ""            {\n""
                + ""                \""equalToXml\"": \""(wrong)\""\n""
                + ""            }\n""
                + ""        ]\n""
                + ""    }\n""
                + ""}"");

    assertThat(response.statusCode(), is(422));

    Errors errors = Json.read(response.content(), Errors.class);
    assertThat(errors.first().getSource().getPointer(), is(""/request/bodyPatterns/0""));
    assertThat(errors.first().getTitle(), is(""Error parsing JSON""));
    assertThat(
        errors.first().getDetail(), is(""Content is not allowed in prolog.; line 1; column 1""));
  }"
"467","66","270","287","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java","737","757","-2147439170","-2147439050","0","0","void returnsBadEntityStatusWhenContainsOperandIsNull()","void returnsBadEntityStatusWhenContainsOperandIsNull(){
    WireMockResponse response =
        testClient.postJson(
            ""/__admin/mappings"",
            ""{\n""
                + ""    \""request\"": {\n""
                + ""        \""bodyPatterns\"": [\n""
                + ""            {\n""
                + ""                \""contains\"": null\n""
                + ""            }\n""
                + ""        ]\n""
                + ""    }\n""
                + ""}"");

    assertThat(response.statusCode(), is(422));

    Errors errors = Json.read(response.content(), Errors.class);
    assertThat(errors.first().getSource().getPointer(), is(""/request/bodyPatterns/0""));
    assertThat(errors.first().getTitle(), is(""Error parsing JSON""));
    assertThat(errors.first().getDetail(), is(""contains operand must be a non-null string""));
  }"
"468","66","270","287","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java","760","780","-2147439050","-2147438930","0","0","void returnsBadEntityStatusWhenEqualToOperandIsWrongType()","void returnsBadEntityStatusWhenEqualToOperandIsWrongType(){
    WireMockResponse response =
        testClient.postJson(
            ""/__admin/mappings"",
            ""{\n""
                + ""    \""request\"": {\n""
                + ""        \""bodyPatterns\"": [\n""
                + ""            {\n""
                + ""                \""equalTo\"": 12\n""
                + ""            }\n""
                + ""        ]\n""
                + ""    }\n""
                + ""}"");

    assertThat(response.statusCode(), is(422));

    Errors errors = Json.read(response.content(), Errors.class);
    assertThat(errors.first().getSource().getPointer(), is(""/request/bodyPatterns/0""));
    assertThat(errors.first().getTitle(), is(""Error parsing JSON""));
    assertThat(errors.first().getDetail(), is(""equalTo operand must be a non-null string""));
  }"
"469","66","270","287","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java","783","803","-2147438930","-2147438810","0","0","void returnsBadEntityStatusWhenContainsOperandIsWrongType()","void returnsBadEntityStatusWhenContainsOperandIsWrongType(){
    WireMockResponse response =
        testClient.postJson(
            ""/__admin/mappings"",
            ""{\n""
                + ""    \""request\"": {\n""
                + ""        \""bodyPatterns\"": [\n""
                + ""            {\n""
                + ""                \""contains\"": 12\n""
                + ""            }\n""
                + ""        ]\n""
                + ""    }\n""
                + ""}"");

    assertThat(response.statusCode(), is(422));

    Errors errors = Json.read(response.content(), Errors.class);
    assertThat(errors.first().getSource().getPointer(), is(""/request/bodyPatterns/0""));
    assertThat(errors.first().getTitle(), is(""Error parsing JSON""));
    assertThat(errors.first().getDetail(), is(""contains operand must be a non-null string""));
  }"
"470","66","270","287","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java","806","826","-2147438810","-2147438690","0","0","void returnsBadEntityStatusWhenMatchesOperandIsWrongType()","void returnsBadEntityStatusWhenMatchesOperandIsWrongType(){
    WireMockResponse response =
        testClient.postJson(
            ""/__admin/mappings"",
            ""{\n""
                + ""    \""request\"": {\n""
                + ""        \""bodyPatterns\"": [\n""
                + ""            {\n""
                + ""                \""matches\"": 12\n""
                + ""            }\n""
                + ""        ]\n""
                + ""    }\n""
                + ""}"");

    assertThat(response.statusCode(), is(422));

    Errors errors = Json.read(response.content(), Errors.class);
    assertThat(errors.first().getSource().getPointer(), is(""/request/bodyPatterns/0""));
    assertThat(errors.first().getTitle(), is(""Error parsing JSON""));
    assertThat(errors.first().getDetail(), is(""matches operand must be a non-null string""));
  }"
