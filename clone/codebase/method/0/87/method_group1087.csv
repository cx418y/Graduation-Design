"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"615","87","322","321","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/StubbingAcceptanceTest.java","754","773","-2147426923","-2147426794","0","0","void matchingOnMultipartRequestBodyWithAContainsAndANegativeRegex()","void matchingOnMultipartRequestBodyWithAContainsAndANegativeRegex(){
    stubFor(
        post(urlEqualTo(""/match/this/part/too""))
            .withMultipartRequestBody(
                aMultipart()
                    .withName(""part-name"")
                    .withBody(containing(""Blah""))
                    .withBody(notMatching("".*[0-9]+.*"")))
            .willReturn(aResponse().withStatus(HTTP_OK).withBodyFile(""plain-example.txt"")));

    WireMockResponse response =
        testClient.postWithMultiparts(
            ""/match/this/part/too"", singletonList(part(""part-name"", ""Blah12345"", TEXT_PLAIN)));
    assertThat(response.statusCode(), is(HTTP_NOT_FOUND));

    response =
        testClient.postWithMultiparts(
            ""/match/this/part/too"", singletonList(part(""part-name"", ""BlahBlahBlah"", TEXT_PLAIN)));
    assertThat(response.statusCode(), is(HTTP_OK));
  }"
"616","87","325","324","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/StubbingAcceptanceTest.java","776","794","-2147426794","-2147426668","0","0","void matchingOnMultipartRequestBodyWithNotContaining()","void matchingOnMultipartRequestBodyWithNotContaining(){
    stubFor(
        post(urlEqualTo(""/match/this/part/too""))
            .withMultipartRequestBody(
                aMultipart()
                    .withHeader(""Content-Type"", notContaining(""application/json""))
                    .withBody(notContaining(""OtherStuff"")))
            .willReturn(aResponse().withStatus(HTTP_OK).withBodyFile(""plain-example.txt"")));

    WireMockResponse response =
        testClient.postWithMultiparts(
            ""/match/this/part/too"", singletonList(part(""part"", ""BlahOtherStuff12345"", TEXT_PLAIN)));
    assertThat(response.statusCode(), is(HTTP_NOT_FOUND));

    response =
        testClient.postWithMultiparts(
            ""/match/this/part/too"", singletonList(part(""part"", ""BlahBlahBlah"", TEXT_PLAIN)));
    assertThat(response.statusCode(), is(HTTP_OK));
  }"
"617","87","325","326","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/StubbingAcceptanceTest.java","797","815","-2147426668","-2147426542","0","0","void matchingOnMultipartRequestBodyWithEqualTo()","void matchingOnMultipartRequestBodyWithEqualTo(){
    stubFor(
        post(urlEqualTo(""/match/this/part/too""))
            .withMultipartRequestBody(
                aMultipart()
                    .withHeader(""Content-Type"", containing(""text/plain""))
                    .withBody(equalTo(""BlahBlahBlah"")))
            .willReturn(aResponse().withStatus(HTTP_OK).withBodyFile(""plain-example.txt"")));

    WireMockResponse response =
        testClient.postWithMultiparts(
            ""/match/this/part/too"", singletonList(part(""part"", ""Blah12345"", TEXT_PLAIN)));
    assertThat(response.statusCode(), is(HTTP_NOT_FOUND));

    response =
        testClient.postWithMultiparts(
            ""/match/this/part/too"", singletonList(part(""part"", ""BlahBlahBlah"", TEXT_PLAIN)));
    assertThat(response.statusCode(), is(HTTP_OK));
  }"
