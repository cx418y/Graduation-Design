"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"460","64","249","248","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java","559","577","-2147439944","-2147439846","0","0","void returnsBadEntityStatusWhenInvalidRegexUsedInUrl()","void returnsBadEntityStatusWhenInvalidRegexUsedInUrl(){
    WireMockResponse response =
        testClient.postJson(
            ""/__admin/mappings"",
            ""{                                      \n""
                + ""    \""request\"": {                            \n""
                + ""        \""urlPattern\"": \""/@$&%*[[^^£$&%\""    \n""
                + ""    }                                         \n""
                + ""}"");

    assertThat(response.statusCode(), is(422));

    Errors errors = Json.read(response.content(), Errors.class);
    assertThat(
        errors.first().getDetail(),
        equalsMultiLine(
            ""Unclosed character class near index 13\n"" + ""/@$&%*[[^^£$&%\n"" + ""             ^""));
    assertThat(errors.first().getSource().getPointer(), is(""/request""));
  }"
"461","64","266","265","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/AdminApiTest.java","580","601","-2147439846","-2147439740","0","0","void returnsBadEntityStatusWhenInvalidRegexUsedInHeader()","void returnsBadEntityStatusWhenInvalidRegexUsedInHeader(){
    WireMockResponse response =
        testClient.postJson(
            ""/__admin/mappings"",
            ""{\n""
                + ""    \""request\"": {\n""
                + ""        \""headers\"": {\n""
                + ""            \""Accept\"": {\n""
                + ""                \""matches\"": \""%[[json[[\""\n""
                + ""            }\n""
                + ""        }\n""
                + ""    }\n""
                + ""}"");

    assertThat(response.statusCode(), is(422));

    Errors errors = Json.read(response.content(), Errors.class);
    assertThat(
        errors.first().getDetail(),
        equalsMultiLine(""Unclosed character class near index 8\n"" + ""%[[json[[\n"" + ""        ^""));
    assertThat(errors.first().getSource().getPointer(), is(""/request/headers/Accept""));
  }"
