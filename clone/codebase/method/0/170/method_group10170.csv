"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"1272","170","617","616","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/RecordingDslAcceptanceTest.java","84","104","-2147366965","-2147366800","0","0","void startsRecordingWithDefaultSpecFromTheSpecifiedProxyBaseUrlWhenServeEventsAlreadyExist()","void startsRecordingWithDefaultSpecFromTheSpecifiedProxyBaseUrlWhenServeEventsAlreadyExist(){
    targetService.stubFor(get(""/record-this"").willReturn(okForContentType(""text/plain"", ""Got it"")));
    targetService.stubFor(get(urlPathMatching(""/do-not-record-this/.*"")).willReturn(noContent()));

    client.get(""/do-not-record-this/1"");
    client.get(""/do-not-record-this/2"");
    client.get(""/do-not-record-this/3"");

    startRecording(targetBaseUrl);

    client.get(""/record-this"");

    List<StubMapping> returnedMappings = stopRecording().getStubMappings();
    client.get(""/do-not-record-this/4"");

    assertThat(returnedMappings.size(), is(1));
    assertThat(returnedMappings.get(0).getRequest().getUrl(), is(""/record-this""));

    StubMapping mapping = findMappingWithUrl(proxyingService.getStubMappings(), ""/record-this"");
    assertThat(mapping.getResponse().getBody(), is(""Got it""));
  }"
"1274","170","624","623","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/RecordingDslAcceptanceTest.java","123","137","-2147366722","-2147366605","0","0","void startsRecordingWithDefaultSpecFromTheSpecifiedProxyBaseUrlWhenServeEventsAlreadyExist()","void startsRecordingWithDefaultSpecFromTheSpecifiedProxyBaseUrlWhenServeEventsAlreadyExist(){
    targetService.stubFor(get(""/record-this"").willReturn(okForContentType(""text/plain"", ""Got it"")));

    startRecording(targetBaseUrl);

    client.get(""/record-this"");

    List<StubMapping> returnedMappings = stopRecording().getStubMappings();

    assertThat(returnedMappings.size(), is(1));
    assertThat(returnedMappings.get(0).getRequest().getUrl(), is(""/record-this""));

    StubMapping mapping = findMappingWithUrl(proxyingService.getStubMappings(), ""/record-this"");
    assertThat(mapping.getResponse().getBody(), is(""Got it""));
  }"
"1278","170","630","629","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/RecordingDslAcceptanceTest.java","179","193","-2147366368","-2147366247","0","0","void startsRecordingWithDefaultSpecFromTheSpecifiedProxyBaseUrlWhenServeEventsAlreadyExist()","void startsRecordingWithDefaultSpecFromTheSpecifiedProxyBaseUrlWhenServeEventsAlreadyExist(){
    targetService.stubFor(get(""/record-this"").willReturn(okForContentType(""text/plain"", ""Got it"")));

    adminClient.startStubRecording(targetBaseUrl);

    client.get(""/record-this"");

    List<StubMapping> returnedMappings = adminClient.stopStubRecording().getStubMappings();

    assertThat(returnedMappings.size(), is(1));
    assertThat(returnedMappings.get(0).getRequest().getUrl(), is(""/record-this""));

    StubMapping mapping = findMappingWithUrl(proxyingService.getStubMappings(), ""/record-this"");
    assertThat(mapping.getResponse().getBody(), is(""Got it""));
  }"
