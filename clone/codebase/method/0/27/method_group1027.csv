"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"162","27","96","95","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/matching/LogicalAndTest.java","43","61","-2147467246","-2147467189","0","0","void serialisesCorrectlyToJson()","void serialisesCorrectlyToJson(){
    StringValuePattern matcher =
        WireMock.and(
            WireMock.before(""2021-01-01T00:00:00Z""), WireMock.after(""2020-01-01T00:00:00Z""));

    assertThat(
        Json.write(matcher),
        jsonEquals(
            ""{\n""
                + ""  \""and\"": [\n""
                + ""    {\n""
                + ""      \""before\"": \""2021-01-01T00:00:00Z\""\n""
                + ""    },\n""
                + ""    {\n""
                + ""      \""after\"": \""2020-01-01T00:00:00Z\""\n""
                + ""    }\n""
                + ""  ]\n""
                + ""}""));
  }"
"193","27","96","101","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/matching/LogicalOrTest.java","45","63","-2147464516","-2147464459","0","0","void serialisesCorrectlyToJson()","void serialisesCorrectlyToJson(){
    StringValuePattern matcher =
        WireMock.or(
            WireMock.before(""2020-01-01T00:00:00Z""), WireMock.after(""2021-01-01T00:00:00Z""));

    assertThat(
        Json.write(matcher),
        jsonEquals(
            ""{\n""
                + ""  \""or\"": [\n""
                + ""    {\n""
                + ""      \""before\"": \""2020-01-01T00:00:00Z\""\n""
                + ""    },\n""
                + ""    {\n""
                + ""      \""after\"": \""2021-01-01T00:00:00Z\""\n""
                + ""    }\n""
                + ""  ]\n""
                + ""}""));
  }"
