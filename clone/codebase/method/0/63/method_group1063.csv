"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"436","63","234","233","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/BasicAuthAcceptanceTest.java","29","40","-2147442745","-2147442679","0","0","void matchesPreemptiveBasicAuthWhenCredentialAreCorrect()","void matchesPreemptiveBasicAuthWhenCredentialAreCorrect(){
    stubFor(
        get(urlEqualTo(""/basic/auth/preemptive""))
            .withBasicAuth(""the-username"", ""thepassword"")
            .willReturn(aResponse().withStatus(200)));

    WireMockResponse response =
        testClient.getWithPreemptiveCredentials(
            ""/basic/auth/preemptive"", wireMockServer.port(), ""the-username"", ""thepassword"");

    assertThat(response.statusCode(), is(200));
  }"
"437","63","234","235","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/BasicAuthAcceptanceTest.java","43","54","-2147442679","-2147442613","0","0","void doesNotMatchPreemptiveBasicAuthWhenCredentialsAreIncorrect()","void doesNotMatchPreemptiveBasicAuthWhenCredentialsAreIncorrect(){
    stubFor(
        get(urlEqualTo(""/basic/auth/preemptive""))
            .withBasicAuth(""the-username"", ""thepassword"")
            .willReturn(aResponse().withStatus(200)));

    WireMockResponse response =
        testClient.getWithPreemptiveCredentials(
            ""/basic/auth/preemptive"", wireMockServer.port(), ""the-username"", ""WRONG!!!"");

    assertThat(response.statusCode(), is(404));
  }"
