"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"548","78","278","277","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/NotMatchedPageAcceptanceTest.java","59","89","-2147432125","-2147432012","0","0","void rendersAPlainTextDiffWhenStubNotMatchedAndANearMissIsAvailable()","void rendersAPlainTextDiffWhenStubNotMatchedAndANearMissIsAvailable(){
    configure();

    stubFor(
        post(""/thing"")
            .withName(
                ""The post stub with a really long name that ought to wrap and let us see exactly how that looks when it is done"")
            .withHeader(""X-My-Header"", containing(""correct value""))
            .withHeader(""Accept"", matching(""text/plain.*""))
            .withRequestBody(
                equalToJson(
                    ""{                              \n""
                        + ""    \""thing\"": {               \n""
                        + ""        \""stuff\"": [1, 2, 3]   \n""
                        + ""    }                          \n""
                        + ""}""))
            .willReturn(ok()));

    WireMockResponse response =
        testClient.postJson(
            ""/thin"",
            ""{                        \n""
                + ""    \""thing\"": {           \n""
                + ""        \""nothing\"": {}    \n""
                + ""    }                      \n""
                + ""}"",
            withHeader(""X-My-Header"", ""wrong value""),
            withHeader(""Accept"", ""text/plain""));

    assertThat(response.content(), equalsMultiLine(file(""not-found-diff-sample_ascii.txt"")));
  }"
"549","78","289","288","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/NotMatchedPageAcceptanceTest.java","92","124","-2147432012","-2147431879","0","0","void adjustsWidthWhenConsoleWidthHeaderSpecified()","void adjustsWidthWhenConsoleWidthHeaderSpecified(){
    configure();

    stubFor(
        post(""/thing"")
            .withName(
                ""The post stub with a really long name that ought to wrap and let us see exactly how that looks when it is done"")
            .withHeader(""X-My-Header"", containing(""correct value""))
            .withHeader(""Accept"", matching(""text/plain.*""))
            .withRequestBody(
                equalToJson(
                    ""{                              \n""
                        + ""    \""thing\"": {               \n""
                        + ""        \""stuff\"": [1, 2, 3]   \n""
                        + ""    }                          \n""
                        + ""}""))
            .willReturn(ok()));

    WireMockResponse response =
        testClient.postJson(
            ""/thin"",
            ""{                        \n""
                + ""    \""thing\"": {           \n""
                + ""        \""nothing\"": {}    \n""
                + ""    }                      \n""
                + ""}"",
            withHeader(""X-My-Header"", ""wrong value""),
            withHeader(""Accept"", ""text/plain""),
            withHeader(CONSOLE_WIDTH_HEADER_KEY, ""69""));

    System.out.println(response.content());
    assertThat(response.content(), equalsMultiLine(file(""not-found-diff-sample_ascii-narrow.txt"")));
  }"
