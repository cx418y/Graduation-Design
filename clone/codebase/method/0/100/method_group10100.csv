"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"718","100","365","364","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/ProxyAcceptanceTest.java","319","336","-2147417252","-2147417128","0","0","void preservesHostHeaderWhenSpecified()","void preservesHostHeaderWhenSpecified(){
    init(wireMockConfig().preserveHostHeader(true));

    target.register(
        get(urlEqualTo(""/preserve-host-header"")).willReturn(aResponse().withStatus(200)));
    proxy.register(
        get(urlEqualTo(""/preserve-host-header""))
            .willReturn(aResponse().proxiedFrom(targetServiceBaseUrl)));

    testClient.get(""/preserve-host-header"", withHeader(""Host"", ""my.host""));

    proxy.verifyThat(
        getRequestedFor(urlEqualTo(""/preserve-host-header""))
            .withHeader(""Host"", equalTo(""my.host"")));
    target.verifyThat(
        getRequestedFor(urlEqualTo(""/preserve-host-header""))
            .withHeader(""Host"", equalTo(""my.host"")));
  }"
"719","100","370","369","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/ProxyAcceptanceTest.java","339","353","-2147417128","-2147416998","0","0","void usesProxyUrlBasedHostHeaderWhenPreserveHostHeaderNotSpecified()","void usesProxyUrlBasedHostHeaderWhenPreserveHostHeaderNotSpecified(){
    init(wireMockConfig().preserveHostHeader(false));

    target.register(get(urlEqualTo(""/host-header"")).willReturn(aResponse().withStatus(200)));
    proxy.register(
        get(urlEqualTo(""/host-header"")).willReturn(aResponse().proxiedFrom(targetServiceBaseUrl)));

    testClient.get(""/host-header"", withHeader(""Host"", ""my.host""));

    proxy.verifyThat(
        getRequestedFor(urlEqualTo(""/host-header"")).withHeader(""Host"", equalTo(""my.host"")));
    target.verifyThat(
        getRequestedFor(urlEqualTo(""/host-header""))
            .withHeader(""Host"", equalTo(""localhost:"" + targetService.port())));
  }"
