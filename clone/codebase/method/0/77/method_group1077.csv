"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"545","77","286","285","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/ResponseDribbleAcceptanceTest.java","71","90","-2147432529","-2147432381","0","0","void requestIsSuccessfulButTakesLongerThanSocketTimeoutWhenDribbleIsEnabled()","void requestIsSuccessfulButTakesLongerThanSocketTimeoutWhenDribbleIsEnabled(){
    doNotRunOnMacOSXInCI();

    stubFor(
        get(""/delayedDribble"")
            .willReturn(
                ok().withBody(BODY_BYTES)
                    .withChunkedDribbleDelay(BODY_BYTES.length, DOUBLE_THE_SOCKET_TIMEOUT)));

    long start = System.currentTimeMillis();
    ClassicHttpResponse response =
        httpClient.execute(new HttpGet(wireMockRule.url(""/delayedDribble"")));
    byte[] responseBody = IOUtils.toByteArray(response.getEntity().getContent());
    int duration = (int) (System.currentTimeMillis() - start);

    assertThat(response.getCode(), is(200));
    assertThat(responseBody, is(BODY_BYTES));
    assertThat(duration, greaterThanOrEqualTo(SOCKET_TIMEOUT_MILLISECONDS));
    assertThat((double) duration, isWithinTolerance(DOUBLE_THE_SOCKET_TIMEOUT, TOLERANCE));
  }"
"547","77","291","290","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/ResponseDribbleAcceptanceTest.java","116","130","-2147432249","-2147432125","0","0","void requestIsSuccessfulAndBelowSocketTimeoutWhenDribbleIsDisabled()","void requestIsSuccessfulAndBelowSocketTimeoutWhenDribbleIsDisabled(){
    doNotRunOnMacOSXInCI();

    stubFor(get(""/nonDelayedDribble"").willReturn(ok().withBody(BODY_BYTES)));

    long start = System.currentTimeMillis();
    ClassicHttpResponse response =
        httpClient.execute(new HttpGet(wireMockRule.url(""/nonDelayedDribble"")));
    byte[] responseBody = IOUtils.toByteArray(response.getEntity().getContent());
    int duration = (int) (System.currentTimeMillis() - start);

    assertThat(response.getCode(), is(200));
    assertThat(BODY_BYTES, is(responseBody));
    assertThat(duration, lessThan(SOCKET_TIMEOUT_MILLISECONDS));
  }"
