"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"1160","160","582","581","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/StubImportAcceptanceTest.java","94","113","-2147377408","-2147377184","0","0","void deletesStubsNotInImportIfConfigured()","void deletesStubsNotInImportIfConfigured(){
    UUID id1 = UUID.randomUUID();
    wm.stubFor(get(""/one"").withId(id1).willReturn(ok(""Original"")));
    wm.stubFor(get(""/four"").willReturn(ok()));
    wm.stubFor(get(""/five"").willReturn(ok()));

    WireMock.importStubs(
        stubImport()
            .stub(get(""/one"").withId(id1).willReturn(ok(""Updated"")))
            .stub(post(""/two"").willReturn(ok()))
            .stub(put(""/three"").willReturn(ok()))
            .deleteAllExistingStubsNotInImport());

    List<StubMapping> stubs = admin.listAllStubMappings().getMappings();
    assertThat(stubs.size(), is(3));
    assertThat(stubs, hasItem(stubMappingWithUrl(""/one"")));
    assertThat(stubs, hasItem(stubMappingWithUrl(""/two"")));
    assertThat(stubs, hasItem(stubMappingWithUrl(""/three"")));
    assertThat(stubs.get(2).getResponse().getBody(), is(""Updated""));
  }"
"1161","160","584","583","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/StubImportAcceptanceTest.java","116","132","-2147377184","-2147377018","0","0","void doesNotDeleteStubsNotInImportIfNotConfigured()","void doesNotDeleteStubsNotInImportIfNotConfigured(){
    UUID id1 = UUID.randomUUID();
    wm.stubFor(get(""/one"").withId(id1).willReturn(ok(""Original"")));
    wm.stubFor(get(""/four"").willReturn(ok()));
    wm.stubFor(get(""/five"").willReturn(ok()));

    WireMock.importStubs(
        stubImport()
            .stub(get(""/one"").withId(id1).willReturn(ok(""Updated"")))
            .stub(post(""/two"").willReturn(ok()))
            .stub(put(""/three"").willReturn(ok()))
            .overwriteExisting()
            .doNotDeleteExistingStubs());

    List<StubMapping> stubs = admin.listAllStubMappings().getMappings();
    assertThat(stubs.size(), is(5));
  }"
