"methodId","CG_T3","CG_T2","CG_T1","tokenCsvId","filePath","startLine","endLine","oriStartToken","oriEndToken","startToken","endToken","signature","body"
"948","127","463","462","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest.java","155","171","-2147398112","-2147398014","0","0","void returnsDefaultIfAnSNIHostNameMatchesTheDefaultCertificate()","void returnsDefaultIfAnSNIHostNameMatchesTheDefaultCertificate(){
    SNIServerName hostName1 = new SNIHostName(""example.com"");
    SNIServerName hostName2 = new SNIHostName(""wiremock.org"");
    SNIServerName hostName3 = new SNIHostName(""example.org"");
    given(extendedSslSessionMock.getRequestedServerNames())
        .willReturn(asList(hostName1, hostName2, hostName3));

    X509Certificate matchingCertificate = certificateWithCn(""CN=wiremock.org"");
    given(keyManagerMock.getCertificateChain(""default_alias""))
        .willReturn(new X509Certificate[] {matchingCertificate});

    String alias =
        certificateGeneratingKeyManager.chooseEngineServerAlias(
            ""RSA"", nullPrincipals, sslEngineMock);

    assertEquals(""default_alias"", alias);
  }"
"955","127","463","462","0","/Users/macbook/Desktop/design/open/wiremock/src/test/java/com/github/tomakehurst/wiremock/http/ssl/CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest.java","162","177","-2147397518","-2147397420","0","0","void returnsDefaultIfAnSNIHostNameMatchesTheDefaultCertificate()","void returnsDefaultIfAnSNIHostNameMatchesTheDefaultCertificate(){
    SNIServerName hostName1 = new SNIHostName(""example.com"");
    SNIServerName hostName2 = new SNIHostName(""wiremock.org"");
    SNIServerName hostName3 = new SNIHostName(""example.org"");
    given(extendedSslSessionMock.getRequestedServerNames())
        .willReturn(asList(hostName1, hostName2, hostName3));

    X509Certificate matchingCertificate = certificateWithCn(""CN=wiremock.org"");
    given(keyManagerMock.getCertificateChain(""default_alias""))
        .willReturn(new X509Certificate[] {matchingCertificate});

    String alias =
        certificateGeneratingKeyManager.chooseServerAlias(""RSA"", nullPrincipals, sslSocketMock);

    assertEquals(""default_alias"", alias);
  }"
